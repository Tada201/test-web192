"use strict";(self.webpackChunkpro192_course=self.webpackChunkpro192_course||[]).push([[949],{3330:(e,t,a)=>{a.r(t),a.d(t,{default:()=>l});var n=a(944);const l=()=>React.createElement("div",{className:"info-section p-4 mb-4 bg-white dark:bg-gray-800 rounded shadow"},React.createElement("h1",{className:"text-3xl font-bold mb-4"},"Polymorphism"),React.createElement("section",{className:"mb-8"},React.createElement("h2",{className:"text-2xl font-semibold mb-2"},"Overloading & Overriding"),React.createElement("p",null,"Polymorphism allows methods and objects to appear in many forms. This is achieved in Java through ",React.createElement("b",null,"overloading")," and ",React.createElement("b",null,"overriding")," methods."),React.createElement("h3",{className:"text-xl font-semibold mt-4 mb-2"},"Overloading"),React.createElement("p",null,"Overloading allows a class to have multiple methods with the same name but different parameter types or counts."),React.createElement(n.A,{language:"java"},'public class Vase extends Item {\n    private int height;\n    private String material;\n\n    public Vase() {\n        super();\n        height = 0;\n        material = "";\n    }\n    public Vase(int height, String material) {\n        super();\n        this.height = height;\n        this.material = material;\n    }\n    public Vase(int value, String creator, int height, String material) {\n        super(value, creator);\n        this.height = height;\n        this.material = material;\n    }\n}'),React.createElement("p",null,"Each constructor has a unique signature. The compiler selects the correct one based on the arguments provided."),React.createElement(n.A,{language:"java"},'Vase v1 = new Vase(0, "Dave", 50, "bronze");\nVase v2 = new Vase(100, "plaster");'),React.createElement("h3",{className:"text-xl font-semibold mt-4 mb-2"},"Overriding"),React.createElement("p",null,"Overriding allows a subclass to provide a specific implementation of a method already defined in its superclass."),React.createElement(n.A,{language:"java"},"public class Item {\n    protected int value;\n    protected String creator;\n    public void input() {\n        // ...\n    }\n    public void output() {\n        // ...\n    }\n}\n\npublic class Vase extends Item {\n    private int height;\n    private String material;\n    @Override\n    public void input() {\n        super.input();\n        // ...\n    }\n    @Override\n    public void output() {\n        super.output();\n        // ...\n    }\n}"),React.createElement("p",null,"Use the ",React.createElement("b",null,"@Override")," annotation to indicate you are overriding a superclass method.")),React.createElement("section",{className:"mb-8"},React.createElement("h2",{className:"text-2xl font-semibold mb-2"},"Function Bindings"),React.createElement("p",null,"Java uses ",React.createElement("b",null,"static binding")," (compile time) for overloaded methods and ",React.createElement("b",null,"dynamic binding")," (runtime) for overridden methods.")),React.createElement("section",{className:"mb-8"},React.createElement("h2",{className:"text-2xl font-semibold mb-2"},"Abstract Classes"),React.createElement("p",null,"An ",React.createElement("b",null,"abstract class")," contains abstract methods (no implementation) that must be implemented by subclasses."),React.createElement(n.A,{language:"java"},'public abstract class Item {\n    protected int value;\n    protected String creator;\n    public abstract void displayPrice();\n}\n\npublic class Vase extends Item {\n    private int height;\n    private String material;\n    @Override\n    public void displayPrice() {\n        if (height < 100)\n            System.out.println("The price is 1000$");\n        else\n            System.out.println("The price is 2000$");\n    }\n}'),React.createElement("p",null,"Subclasses must implement all abstract methods from their superclass.")),React.createElement("section",{className:"mb-8"},React.createElement("h2",{className:"text-2xl font-semibold mb-2"},"Interfaces"),React.createElement("p",null,"An ",React.createElement("b",null,"interface")," defines method signatures that implementing classes must provide. Interfaces enable multiple inheritance of type."),React.createElement(n.A,{language:"java"},'public interface Menu {\n    void getSalad();\n    void getBeefsteak();\n}\n\npublic class Chef implements Menu {\n    public void getSalad() {\n        System.out.println("This is a salad");\n    }\n    public void getBeefsteak() {\n        System.out.println("This is a beefsteak");\n    }\n}'),React.createElement("p",null,"A class can implement multiple interfaces, providing polymorphic behavior.")),React.createElement("section",{className:"mb-8"},React.createElement("h2",{className:"text-2xl font-semibold mb-2"},"Summary"),React.createElement("ul",{className:"list-disc ml-6 mb-2"},React.createElement("li",null,"Polymorphism allows objects and methods to take many forms."),React.createElement("li",null,"Overloading and overriding are key techniques for polymorphism."),React.createElement("li",null,"Abstract classes and interfaces enable flexible and reusable code."),React.createElement("li",null,"In OOP, a parent class or interface reference can refer to a child class object."))),React.createElement("section",{className:"mb-8"},React.createElement("h2",{className:"text-2xl font-semibold mb-2"},"Course Slide"),React.createElement("ul",null,React.createElement("li",null,React.createElement("a",{href:"/resource/Polymorphism.pdf",download:!0,className:"text-blue-600 underline"},"Polymorphism.pdf")))))}}]);